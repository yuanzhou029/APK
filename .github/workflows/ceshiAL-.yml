name: DY - AliyunDrive

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'  # 每4小时运行一次

jobs:
  upload-to-aliyun:
    runs-on: ubuntu-latest

    steps:
      - name: 安装 Python 依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install --upgrade pip
          pip install aligo requests PyGithub

      - name: 下载订阅文件
        run: |
          rm -f dy-*.txt
          urls=(
            "https://sub.fqzsnai.ggff.net/auto"
            "https://raw.githubusercontent.com/SoliSpirit/v2ray-configs/refs/heads/main/all_configs.txt"
            # ... 这里省略其他链接，保持你原先列表 ...
            "https://dy.51281868.xyz/yuanzhou029?b64"
          )
          i=1
          for url in "${urls[@]}"; do
            echo "Downloading dy-$i.txt"
            curl -L --max-time 30 "$url" -o "dy-$i.txt" || echo "下载失败: $url"
            i=$((i+1))
          done

      - name: 上传到阿里云盘（自动刷新 token，仅用 refresh_token）
        env:
          ALIYUN_REFRESH_TOKEN: ${{ secrets.ALIYUN_REFRESH_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 << 'EOF'
          import os
          from aligo import Aligo
          from github import Github

          refresh_token = os.environ.get("ALIYUN_REFRESH_TOKEN")
          if not refresh_token:
              raise Exception("缺少 ALIYUN_REFRESH_TOKEN，请先手动获取并配置到 Secrets")

          ali = Aligo(refresh_token=refresh_token)
          new_token = ali.refresh_token

          if new_token != refresh_token:
              print("检测到新的 refresh_token，更新到 GitHub Secrets")
              repo = Github(os.environ["GH_TOKEN"]).get_repo(os.environ["GITHUB_REPOSITORY"])
              repo.create_or_update_secret("ALIYUN_REFRESH_TOKEN", new_token)

          folder = ali.create_folder('DY订阅文件')
          for i in range(1, 25):
              file_name = f"dy-{i}.txt"
              if os.path.exists(file_name):
                  ali.upload_file(file_name, parent_file_id=folder.file_id)
                  print(f"已上传: {file_name}")
              else:
                  print(f"跳过: {file_name} (不存在)")
          EOF
