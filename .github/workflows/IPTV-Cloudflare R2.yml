name: IPTV-Cloudflare R2

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  push:

jobs:
  upload-to-r2:
    runs-on: ubuntu-latest

    steps:
      - name: Download file from GitHub
        run: |
          curl -o result.txt https://raw.githubusercontent.com/8080713/iptv-api/refs/heads/main/output/result.txt

      - name: Install AWS CLI
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip3 install awscli --upgrade

      - name: Configure AWS CLI for Cloudflare R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT: ${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
          BUCKET_NAME: ${{ secrets.CLOUDFLARE_R2_BUCKET_NAME }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set default.region us-east-1
          aws configure set default.s3.addressing_style path
          aws configure set default.s3.endpoint_url "$AWS_ENDPOINT"  # ✅ 添加此行

      - name: Test Connection to Cloudflare R2
        env:
          BUCKET_NAME: ${{ secrets.CLOUDFLARE_R2_BUCKET_NAME }}
        run: |
          aws s3 ls s3://$BUCKET_NAME

      - name: Upload result.txt to Cloudflare R2  # ✅ 改为上传目标文件
        env:
          BUCKET_NAME: ${{ secrets.CLOUDFLARE_R2_BUCKET_NAME }}
        run: |
          aws s3 cp result.txt s3://$BUCKET_NAME/result.txt

  cleanup-workflow-runs:
    runs-on: ubuntu-latest
    needs: upload-to-r2

    steps:
      - name: Setup GitHub Token
        run: echo "GH_TOKEN=${{ secrets.GT_TOKEN }}" >> $GITHUB_ENV

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Delete workflow runs
        env:
          GH_TOKEN: ${{ secrets.GT_TOKEN }}
        run: |
          RUNS=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=100" \
            | jq '.workflow_runs[] | select(.status == "completed") | .id')

          for RUN_ID in $RUNS; do
            echo "Deleting run ID: $RUN_ID"
            curl -X DELETE -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID"
          done
